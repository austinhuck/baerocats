<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XBee</name>
    </assembly>
    <members>
        <member name="M:XBee.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
            <param name="dispose">Disposal action which will be run upon calling Dispose.</param>
        </member>
        <member name="P:XBee.AnonymousDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="M:XBee.AnonymousDisposable.Dispose">
            <summary>
            Calls the disposal action if and only if the current instance hasn't been disposed yet.
            </summary>
        </member>
        <member name="M:XBee.Devices.XBeeSeries2.GetAssociationAsync">
            <summary>
            Gets the network association state for this node.
            </summary>
        </member>
        <member name="M:XBee.Devices.XBeePro900HP.GetNodeMessagingOptionsAsync">
            <summary>
            Gets messaging options for this node.
            </summary>
        </member>
        <member name="M:XBee.Devices.XBeePro900HP.SetNodeMessagingOptionsAsync(XBee.Frames.AtCommands.NodeMessagingOptions)">
            <summary>
            Sets messaging options for this node.
            </summary>
            <param name="options">Messaging options</param>
        </member>
        <member name="M:XBee.Devices.XBeeSeries1.IsCoordinatorAsync">
            <summary>
            Gets a value that indicates whether this node is a coordinator node.
            </summary>
            <returns>True if this is a coordinator node</returns>
        </member>
        <member name="M:XBee.Devices.XBeeSeries1.SetCoordinatorAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether this node is a coordinator node.
            </summary>
            <param name="enable">True if this is a coordinator node</param>
        </member>
        <member name="M:XBee.Devices.XBeeSeries1.GetSleepOptionsAsync">
            <summary>
            Gets flags indicating the configured sleep options for this node.
            </summary>
        </member>
        <member name="M:XBee.Devices.XBeeSeries1.SetSleepOptionsAsync(XBee.Frames.AtCommands.SleepOptions)">
            <summary>
            Sets flags indicating sleep options for this node.
            </summary>
            <param name="options">Sleep options</param>
        </member>
        <member name="T:XBee.Sample">
            <summary>
            Represents a sample returned from an XBee node.
            </summary>
        </member>
        <member name="P:XBee.Sample.DigitalChannels">
            <summary>
            Bit-mask indicating which digital channels are included in the sample.
            </summary>
        </member>
        <member name="P:XBee.Sample.DigitalSampleState">
            <summary>
            Bit-mask indicating which digital channels are high.
            </summary>
        </member>
        <member name="P:XBee.Sample.AnalogChannels">
            <summary>
            Bit-mask indicating which analog channels are included in the sample.
            </summary>
        </member>
        <member name="P:XBee.Sample.AnalogSamples">
            <summary>
            Collection of analog readings with one reading per active analog channel.
            </summary>
        </member>
        <member name="P:XBee.SampleReceivedEventArgs.DigitalChannels">
            <summary>
            Bit-mask indicating which digital channels are included in the sample.
            </summary>
        </member>
        <member name="P:XBee.SampleReceivedEventArgs.DigitalSampleState">
            <summary>
            Bit-mask indicating which digital channels are high.
            </summary>
        </member>
        <member name="P:XBee.SampleReceivedEventArgs.AnalogChannels">
            <summary>
            Bit-mask indicating which analog channels are included in the sample.
            </summary>
        </member>
        <member name="P:XBee.SampleReceivedEventArgs.AnalogSamples">
            <summary>
            Collection of analog readings with one reading per active analog channel.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.FrameMemberSerialized">
            <summary>
                Occurs after a member has been serialized.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.FrameMemberDeserialized">
            <summary>
                Occurs after a member has been deserialized.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.FrameMemberSerializing">
            <summary>
                Occurs before a member has been serialized.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.FrameMemberDeserializing">
            <summary>
                Occurs before a member has been deserialized.
            </summary>
        </member>
        <member name="P:XBee.XBeeController.Local">
            <summary>
                Get the local node.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.NodeDiscovered">
            <summary>
                Occurs when a node is discovered during network discovery.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.DataReceived">
            <summary>
                Occurs when data is received from a node.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.SampleReceived">
            <summary>
                Occurs when a sample is received from a node.
            </summary>
        </member>
        <member name="E:XBee.XBeeController.SensorSampleReceived">
            <summary>
                Occurs when a sensor sample is received from a node.
            </summary>
        </member>
        <member name="M:XBee.XBeeController.OpenAsync(System.String,System.Int32)">
            <summary>
                Open a local node.
            </summary>
            <param name="port">The COM port of the node</param>
            <param name="baudRate">The baud rate, typically 9600 or 115200 depending on the model</param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeController.GetRemoteAsync(XBee.NodeAddress)">
            <summary>
                Open a remote node.
            </summary>
            <param name="address">The address of the remote node</param>
            <returns>The remote node</returns>
        </member>
        <member name="M:XBee.XBeeController.GetRemoteNodeAsync(XBee.NodeAddress)">
            <summary>
                Open a remote node.
            </summary>
            <param name="address">The address of the remote node</param>
            <returns>The remote node</returns>
        </member>
        <member name="M:XBee.XBeeController.GetNodeAsync(XBee.NodeAddress,System.Boolean)">
            <summary>
            Create a node.
            </summary>
            <param name="address">The address of the node or null for the controller node.</param>
            <param name="autodetectHardwareVersion">If true query node for hardware version.  Otherwise assume controller version.</param>
            <returns>The specified node.</returns>
        </member>
        <member name="M:XBee.XBeeController.GetNodeAsync(XBee.NodeAddress,XBee.Frames.AtCommands.HardwareVersion)">
            <summary>
            Create a node.
            </summary>
            <param name="address">The address of the node or null for the controller node.</param>
            <param name="version">The hardware version to use for the specified node.</param>
            <returns>The specified node.</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteAsync(XBee.FrameContent)">
            <summary>
                Send a frame to this node.
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteAsync(XBee.FrameContent,System.Threading.CancellationToken)">
            <summary>
                Send a frame to this node.
            </summary>
            <param name="frame"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteAtCommand(XBee.Frames.AtCommand,XBee.NodeAddress)">
            <summary>
                Send an AT command to this node.
            </summary>
            <param name="command"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteQueryAsync``1(XBee.CommandFrameContent,System.TimeSpan)">
            <summary>
                Send a frame to this node and wait for a response.
            </summary>
            <typeparam name="TResponseFrame">The expected response type</typeparam>
            <param name="frame">The frame to send</param>
            <param name="timeout">Timeout</param>
            <returns>The response frame</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteQueryAsync``1(XBee.CommandFrameContent,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Send a frame to this node and wait for a response.
            </summary>
            <typeparam name="TResponseFrame">The expected response type</typeparam>
            <param name="frame">The frame to send</param>
            <param name="timeout">Timeout</param>
            <param name="cancellationToken">A cancellation token used to cancel the query.</param>
            <returns>The response frame</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteQueryAsync``1(XBee.CommandFrameContent)">
            <summary>
                Send a frame to this node and wait for a response using a default timeout.
            </summary>
            <typeparam name="TResponseFrame">The expected response type</typeparam>
            <param name="frame">The frame to send</param>
            <returns>The response frame</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteQueryAsync``1(XBee.CommandFrameContent,System.Threading.CancellationToken)">
            <summary>
                Send a frame to this node and wait for a response using a default timeout.
            </summary>
            <typeparam name="TResponseFrame">The expected response type</typeparam>
            <param name="frame">The frame to send</param>
            <param name="cancellationToken">Used to cancel the operation</param>
            <returns>The response frame</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteAtQueryAsync``1(XBee.Frames.AtCommand,XBee.NodeAddress)">
            <summary>
                Send an AT command to a node and wait for a response.
            </summary>
            <typeparam name="TResponseData">The expected response data type</typeparam>
            <param name="command">The command to send</param>
            <param name="address">The address of the node.  If this is null the command will be sent to the local node.</param>
            <returns>The response data</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteAtQueryAsync``1(XBee.Frames.AtCommand,XBee.NodeAddress,System.TimeSpan)">
            <summary>
                Send an AT command to a node and wait for a response.
            </summary>
            <typeparam name="TResponseData">The expected response data type</typeparam>
            <param name="command">The command to send</param>
            <param name="address">The address of the node.  If this is null the command will be sent to the local node.</param>
            <param name="timeout"></param>
            <returns>The response data</returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteAtCommandAsync(XBee.Frames.AtCommand,XBee.NodeAddress)">
            <summary>
                Execute an AT command on a node without waiting for a response.
            </summary>
            <param name="command">The AT command to execute</param>
            <param name="address">The address of the node.  If this is null the command will be execute on the local node.</param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeController.ExecuteMultiQueryAsync``1(XBee.CommandFrameContent,System.Action{``0},System.TimeSpan)">
            <summary>
                Execute a command and wait for responses from multiple nodes.
            </summary>
            <typeparam name="TResponseFrame">The expected response type</typeparam>
            <param name="frame">The frame to send.</param>
            <param name="callback">This will be called when a response is received within the timeout period.</param>
            <param name="timeout">The amount of time to wait before responses will be ignored</param>
        </member>
        <member name="M:XBee.XBeeController.GetSampleSource">
            <summary>
                Get the controller sample source.
            </summary>
        </member>
        <member name="M:XBee.XBeeController.GetReceivedDataSource">
            <summary>
                Get the controller received data source.
            </summary>
        </member>
        <member name="M:XBee.XBeeController.DiscoverNetworkAsync">
            <summary>
                Start network discovery.  The discovery of a node will result in a <see cref="E:XBee.XBeeController.NodeDiscovered" /> event.
            </summary>
        </member>
        <member name="M:XBee.XBeeController.DiscoverNetworkAsync(System.TimeSpan)">
            <summary>
                Start network discovery.  The discovery of a node will result in a <see cref="E:XBee.XBeeController.NodeDiscovered" /> event.
            </summary>
            <param name="timeout">The amount of time to wait until discovery responses are ignored</param>
            <remarks>During network discovery nodes may be unresponsive</remarks>
        </member>
        <member name="M:XBee.XBeeController.FindAndOpenAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
                Try to find and open a local node.
            </summary>
            <param name="ports">Ports to scan</param>
            <param name="baudRate">Baud rate, typically 9600 or 115200</param>
            <returns>The controller or null if no controller was found</returns>
        </member>
        <member name="M:XBee.XBeeController.FindAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
                Try to find and open a local node.
            </summary>
            <param name="ports">Ports to scan</param>
            <param name="baudRate">Baud rate, typically 9600 or 115200</param>
            <returns>The controller or null if no controller was found</returns>
        </member>
        <member name="E:XBee.FrameSerializer.MemberSerialized">
            <summary>
                Occurs after a member has been serialized.
            </summary>
        </member>
        <member name="E:XBee.FrameSerializer.MemberDeserialized">
            <summary>
                Occurs after a member has been deserialized.
            </summary>
        </member>
        <member name="E:XBee.FrameSerializer.MemberSerializing">
            <summary>
                Occurs before a member has been serialized.
            </summary>
        </member>
        <member name="E:XBee.FrameSerializer.MemberDeserializing">
            <summary>
                Occurs before a member has been deserialized.
            </summary>
        </member>
        <member name="E:XBee.SerialConnection.MemberSerialized">
            <summary>
                Occurs after a member has been serialized.
            </summary>
        </member>
        <member name="E:XBee.SerialConnection.MemberDeserialized">
            <summary>
                Occurs after a member has been deserialized.
            </summary>
        </member>
        <member name="E:XBee.SerialConnection.MemberSerializing">
            <summary>
                Occurs before a member has been serialized.
            </summary>
        </member>
        <member name="E:XBee.SerialConnection.MemberDeserializing">
            <summary>
                Occurs before a member has been deserialized.
            </summary>
        </member>
        <member name="P:XBee.XBeeNode.HardwareVersion">
            <summary>
            The hardware version for this node.
            </summary>
        </member>
        <member name="P:XBee.XBeeNode.Address">
            <summary>
            The address of this node.
            </summary>
        </member>
        <member name="E:XBee.XBeeNode.DataReceived">
            <summary>
            Occurs when data is received from this node.
            </summary>
        </member>
        <member name="E:XBee.XBeeNode.SampleReceived">
            <summary>
            Occurs when a sample is received from this node.
            </summary>
        </member>
        <member name="E:XBee.XBeeNode.SensorSampleReceived">
            <summary>
            Occurs when a sample is received from this node.
            </summary>
        </member>
        <member name="M:XBee.XBeeNode.ResetAsync">
            <summary>
            Force a hardware reset of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.GetNodeIdentifierAsync">
            <summary>
            Gets the configured name of this node.
            </summary>
            <returns>The name of this node</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetNodeIdentifierAsync(System.String)">
            <summary>
            Sets the configured name of this node.
            </summary>
            <param name="id">The new name for this node</param>
        </member>
        <member name="M:XBee.XBeeNode.GetDestinationAddressAsync">
            <summary>
            Queries the long network address for this node.
            </summary>
            <returns>The long network address</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetDestinationAddressAsync(XBee.LongAddress)">
            <summary>
            Sets the long network address of this node.
            </summary>
            <param name="address">The long network address</param>
        </member>
        <member name="M:XBee.XBeeNode.SetNetworkAddressAsync(XBee.ShortAddress)">
            <summary>
            Queries the short network address of this node.
            </summary>
            <param name="address">The short network address</param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.GetSerialNumberAsync">
            <summary>
            Gets the static serial number of this node.
            </summary>
            <returns>The serial number</returns>
        </member>
        <member name="M:XBee.XBeeNode.GetSleepModeAsync">
            <summary>
            Gets the configured sleep mode for this node.
            </summary>
            <returns>The sleep mode</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetSleepModeAsync(XBee.Frames.AtCommands.SleepMode)">
            <summary>
            Sets the configured sleep mode for this node.
            </summary>
            <param name="mode">The sleep mode</param>
        </member>
        <member name="M:XBee.XBeeNode.GetInputOutputConfigurationAsync(XBee.Frames.AtCommands.InputOutputChannel)">
            <summary>
            Gets configuration for a channel on this node.
            </summary>
            <param name="channel">The channel</param>
            <returns>The channel configuration</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetInputOutputConfigurationAsync(XBee.Frames.AtCommands.InputOutputChannel,XBee.Frames.AtCommands.InputOutputConfiguration)">
            <summary>
            Sets configuration for a channel on this node.
            </summary>
            <param name="channel">The channel</param>
            <param name="configuration">The channel configuration</param>
        </member>
        <member name="M:XBee.XBeeNode.GetChangeDetectionChannelsAsync">
            <summary>
            Gets channels configured for change detection.
            </summary>
            <returns>Flags indicating which channels are configured for change detection</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetChangeDetectionChannelsAsync(XBee.Frames.DigitalSampleChannels)">
            <summary>
            Sets channels configured for change detection.
            </summary>
            <param name="channels">Flags indicating which channels to configure for change detection</param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.ForceSampleAsync">
            <summary>
            Force this node to take and report a sample on configured channels.
            </summary>
        </member>
        <member name="M:XBee.XBeeNode.GetSampleRateAsync">
            <summary>
            Gets the configured sample rate.
            </summary>
            <returns>The period between samples</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetSampleRateAsync(System.TimeSpan)">
            <summary>
            Sets the configured sample rate.
            </summary>
            <param name="interval">The period between samples</param>
        </member>
        <member name="M:XBee.XBeeNode.IsEncryptionEnabledAsync">
            <summary>
            Used to determine if encryption is enabled on this node.
            </summary>
            <returns>True if encryption is enabled</returns>
        </member>
        <member name="M:XBee.XBeeNode.SetEncryptionEnabledAsync(System.Boolean)">
            <summary>
            Used to enable encryption on this node.
            </summary>
            <param name="enabled">True to enable encryption</param>
        </member>
        <member name="M:XBee.XBeeNode.SetEncryptionKeyAsync(System.Byte[])">
            <summary>
            Sets the configured symmetric encryption key for this node.  Only used if encryption is enabled.  There is no way to query the configured encryption key.
            </summary>
            <param name="key">A 16 byte symmetric encryption key</param>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.WriteChangesAsync">
            <summary>
            Commit configuration changes to this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.GetSamples">
            <summary>
            Subscribe to this node as a sample (not data) source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.GetReceivedData">
            <summary>
            Subscribe to this node as a data (not sample) source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XBee.XBeeNode.TransmitDataAsync(System.Byte[],System.Boolean)">
            <summary>
            Send data to this node.  This can either be used in transparent serial mode or to communicate with programmable nodes.
            </summary>
            <param name="data">The data to send</param>
            <param name="enableAck">True to request an acknowledgement.  If an acknowledgement is requested and no acknowledgement is received a TimeoutException will be thrown.</param>
        </member>
        <member name="M:XBee.XBeeNode.TransmitDataAsync(System.Byte[],System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send data to this node.  This can either be used in transparent serial mode or to communicate with programmable nodes.
            </summary>
            <param name="data">The data to send</param>
            <param name="cancellationToken">Used to cancel the operation</param>
            <param name="enableAck">True to request an acknowledgement.  If an acknowledgement is requested and no acknowledgement is received a TimeoutException will be thrown.</param>
        </member>
        <member name="M:XBee.XBeeNode.GetSerialStream">
            <summary>
            Returns a stream that represents serial passthough on the node.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
